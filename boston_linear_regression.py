# -*- coding: utf-8 -*-
"""TD1_IA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T1R7PDoCPk8KsugWLAkvUCsjhUCeQky8

# Partie A
"""

#Loading modules
import numpy as np
import matplotlib.pyplot as mat
import pandas as pd
import seaborn as sea

#Importing boston dataset
from sklearn.datasets import load_boston
boston = load_boston()

#Printing the dataset header (content)
#df = pd.DataFrame(boston.data, columns = boston.feature_names)
#df['target'] = boston.target
#X = boston.data
#df.sample(10)
print("\ndataset header\n-----------")
print (boston.keys())

#Printing the dataset characteristics
print("\n\n\ndataset description\n----------------")
print(boston.DESCR)

"""# **Partie B**"""

df = pd.DataFrame(boston.data, columns = boston.feature_names)
df.head()

"""On constate qu'il y a 13 dimensions"""

df['MEDV']=boston.target
df.head()

"""On print dF.isnull() pour voir s'il ya des données manquantes car ça va s'afficher après, pour remedier il faut mettre à la place des 0 ou quoi que ce soit"""

print(df.isnull())

"""
On peut aussi mettre la somme, si c'est different de 0, il ya une donnée manquante"""

print(df.isnull().sum())

"""# Partie **C**

On trace tout d'abbord la variable cible MEDV
"""

sea.set(rc={'figure.figsize':(11.7,8.27)})
sea.distplot(df['MEDV'], bins=30) #hostogramme de 30 cases
sea.distplot(df['MEDV'], bins=100) #hostogramme de 100 cases

"""## Génération de matrice de correlation

Pour ajuster un modèle de regression lineaire nous selectionnons  les caracteristique ayant une forte correlation on utilise que la variable cible
"""

correlation_matrix = df.corr().round(2)
sea.heatmap(data=correlation_matrix, annot=True)

"""#**Partie D** """

X = pd.DataFrame(np.c_[df['LSTAT'], df['RM']], columns = ['LSTAT','RM'])
Y = df['MEDV']

X

Y

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=5)

print("X_train.shape : ",X_train.shape)
print("X_test.shape : ",X_test.shape)
print("Y_train.shape : ",Y_train.shape)
print("Y_test.shape : ",Y_test.shape)

"""#**Partie E** """

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
#Linear model
lin_model = LinearRegression() 
# training
lin_model.fit(X_train, Y_train)

"""On donne Data train au model pour s'entrainer et construire le modèle f et après on va créer un _(y_pre)_ pour tester si on avais une bonne prediction ou pas."""

y_pre=lin_model.predict(X_test)
mse = mean_squared_error(Y_test, y_pre)
print("mse =", mse)
rmse=(np.sqrt(mean_squared_error(Y_test, y_pre)))
print("rmse =", rmse)

"""On avais un mse=32.08 c-à-d qu'on avais pas une bonne prédiction."""